{"version":3,"sources":["SpeedPoint.js","Map.js","reportWebVitals.js","index.js"],"names":["SpeedPoint","props","useState","color","setColor","useEffect","speeding","lat","lng","style","background","padding","display","textAlign","alignItems","justifyContent","borderRadius","width","height","opacity","speed","id","place","effect","street","avgSpeed","Map","points","setPoints","zoom","setZoom","a","temp","getAPIData","apiData","getRAWData","sfData","arr","ridofUnique","console","log","i","length","isNaN","push","main","defaultProps","center","bootstrapURLKeys","key","defaultCenter","defaultZoom","onChange","z","map","info","subs","array","myHeaders","Headers","getAppToken","token","append","requestOptions","method","headers","redirect","fetch","then","response","text","parseAPIData","catch","error","fetchToken","tokenData","result","url","json","parseRAWData","data","codeRAWArray","nameRAWArray","coordRAWArray","test","JSON","parse","segments","lengthCounter","code","roadInfo","name","locationInfo","coordinates","codeAPIArray","currentSpeedAPIArray","averageSpeedAPIArray","segmentspeeds","average","apiCodeArray","currentSpeedArray","averageSpeedArray","sfCodeArray","sfNameArray","sfcoordArray","overallArray","high","j","miniArray","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff37dbb4.chunk.js","sourcesContent":["import React , {useEffect, useState} from 'react';\nimport ReactTooltip from 'react-tooltip'\n\nfunction SpeedPoint(props){\n    const [color, setColor] = useState(\"red\")\n    useEffect(()=>{\n       if(props.speeding){\n           setColor('green')\n       }\n    }, [props.speeding])\n    return (\n        <>\n        <div data-tip=\"\" data-for={\"registerTip\"+props.lat+\"/\"+props.lng} style={{\n            color: 'white',\n            background: color,\n            padding: '15px 10px',\n            display: 'inline-flex',\n            textAlign: 'center',\n            alignItems: 'center',\n            justifyContent: 'center',\n            borderRadius: '100%',\n            //transform: `translate(-50%, -50%)`,\n            width: `${0.015}rem`,\n            height: `${0.015}rem`,\n            opacity: 0.75\n        }}>\n            {props.speed}\n        </div>\n            <ReactTooltip id={\"registerTip\"+props.lat+\"/\"+props.lng} place=\"top\" effect=\"solid\">\n                {`Street: ${props.street}\\nAvg Speed: ${props.avgSpeed}`}\n            </ReactTooltip>\n        </>\n    );\n\n}\nexport default SpeedPoint","import React , {useEffect, useState} from 'react';\n\nimport GoogleMapReact from 'google-map-react';\nimport SpeedPoint from \"./SpeedPoint\";\nfunction Map(){\n    const [points, setPoints] = useState([]);\n    const [zoom, setZoom] = useState(1);\n\n    useEffect(() => {\n        async function main() {\n            let temp = [];\n            //let arr = [[45463462, \"EL CAMINO REAL\", [37.34988587105891,-121.93534355137554], 34.5, 22, false]];\n            //console.log(arr)\n            let apiData = await getAPIData()\n            let sfData = await getRAWData()\n            let arr = ridofUnique(apiData[0], apiData[1], apiData[2], sfData[0], sfData[1], sfData[2])\n            console.log(arr)\n            let mult = 5;\n            for (let i = 0; i < arr.length-mult; i+=mult) {\n                if(!isNaN(arr[i][2][1]) && !isNaN(arr[i][2][0]) && !isNaN(arr[i][3])) {\n                    let speeding = arr[i][5]\n                    if(arr[i][3] <= 25)\n                        speeding = true\n                    temp.push({\n                        lat: arr[i][2][1],\n                        lng: arr[i][2][0],\n                        street: arr[i][1],\n                        speed: arr[i][3],\n                        speeding: speeding,\n                        avgSpeed: arr[i][4],\n                    })\n                }\n            }\n            console.log(temp)\n            setPoints(temp)\n        }\n        main()\n    }, []);\n    /*useEffect(async () => {\n       /!*let arr = []\n        let apiData = await getAPIData()\n        let sfData = await getRAWData()\n        arr = ridofUnique(apiData[0],apiData[1],apiData[2],sfData[0],sfData[1],sfData[2])\n        let temp = []\n        for (let i = 0; i < 10; i++) {\n            console.log('checked '+ arr[i][2][0])\n            points.push({lat: arr[i][2][0], lng: arr[i][2][1], street: arr[i][1], speed: arr[i][3],speeding: arr[i][5]})\n            temp.push({lat: arr[i][2][0], lng: arr[i][2][1], street: arr[i][1], speed: arr[i][3],speeding: arr[i][5]})\n        }*!/\n        setPoints([[45463462, \"EL CAMINO REAL\", [37.34988587105891,-121.93534355137554], 34.5, 22, false]])\n    }, []);*/\n\n    const defaultProps = {\n        center: {\n            lat: 37.75,\n            lng: -122.45,\n        },\n        zoom: 11\n    };\n    function subs(zoom){\n        console.log(zoom)\n        if(zoom > 12) {\n            return (\n                <GoogleMapReact\n                    bootstrapURLKeys={{key: \"AIzaSyDIwpNgFSik6tmPDKA2yBsT_nMYXBnA7Tc\"}}\n                    defaultCenter={defaultProps.center}\n                    defaultZoom={defaultProps.zoom}\n                    onChange={(z) => {\n                        setZoom(z.zoom)\n                        console.log(zoom)\n                    }}>\n\n                    {points.map(info =>\n                        <SpeedPoint\n                            key={info.lat + \"/\" + info.lng}\n                            lat={info.lat}\n                            lng={info.lng}\n                            street={info.street}\n                            speed={info.speed}\n                            speeding={info.speeding}\n                            avgSpeed ={info.avgSpeed}\n                        />\n                    )}\n\n                </GoogleMapReact>\n            )\n        }else{\n            return(\n                <GoogleMapReact\n                    bootstrapURLKeys={{key: \"AIzaSyDIwpNgFSik6tmPDKA2yBsT_nMYXBnA7Tc\"}}\n                    defaultCenter={defaultProps.center}\n                    defaultZoom={defaultProps.zoom}\n                    onChange={(z) => {\n                        setZoom(z.zoom)\n                        console.log(zoom)\n                    }}>\n                </GoogleMapReact>\n            )\n        }\n    }\n    return (\n        <div style={{ height: '100vh', width: '100%' }}>\n            {subs(zoom)}\n        </div>\n    );\n    async function getAPIData(){\n        let array = []\n        let myHeaders = new Headers()\n        let token = await getAppToken();\n        console.log(token)\n        myHeaders.append(\"Authorization\", token)\n        let requestOptions = {\n            method: 'GET',\n            headers: myHeaders,\n            redirect: 'follow'\n        }\n        await fetch(\"https://api.iq.inrix.com/v1/segments/speed?box=37.858%7C-122.541,37.699%7C-122.341\", requestOptions)\n            .then(response => response.text())\n            .then(response => {\n                array = parseAPIData(response)\n            })\n            .catch(error => console.log('error', error))\n        return array\n    }\n\n    async function getAppToken(){\n        let tokenData\n        let appId = \"f6rmtcl05k\"\n        let hashToken = \"ZjZybXRjbDA1a3w2YU55M3Yza2x1YW9LcFVCQWdiT1RzMXZhcFVqSXRYNjBNUVljeThm\"\n        let url = \"https://api.iq.inrix.com/auth/v1/appToken?appId=\"+appId+\"&hashToken=\"+hashToken\n        tokenData = await fetchToken(url)\n        let token = tokenData.result.token\n        return (\"Bearer \" + token)\n    }\n\n    async function fetchToken(url) {\n        let response = await fetch(url)\n        return await response.json()\n    }\n\n    async function getRAWData(){\n        let array = []\n        var requestOptions = {\n            method: 'GET',\n            redirect: 'follow'\n        };\n\n        await fetch(\"https://raw.githubusercontent.com/wiebecoding/inrix-2021-hackathon/main/san_fran_segments.json\", requestOptions)\n            .then(response => response.text())\n            .then(response => {\n                array = parseRAWData(response)\n            })\n            .catch(error => console.log('error', error));\n        return array;\n    }\n\n    async function parseRAWData(data){\n        let codeRAWArray = []\n        let nameRAWArray = []\n        let coordRAWArray = []\n        let test = JSON.parse(data)\n        let json = test.result.segments\n        console.log(json)\n        for(let lengthCounter = 0; lengthCounter < json.length; lengthCounter++){\n            codeRAWArray.push(json[lengthCounter].code)\n            nameRAWArray.push(json[lengthCounter].roadInfo.name)\n            coordRAWArray.push(json[lengthCounter].locationInfo.center.coordinates)\n        }\n        return[codeRAWArray,nameRAWArray,coordRAWArray]\n    }\n\n/*    async function main(){\n        let totalArr\n        let apiData = await getAPIData()\n        let sfData = await getRAWData()\n        console.log(apiData)\n        console.log(sfData)\n        totalArr = ridofUnique(apiData[0],apiData[1],apiData[2],sfData[0],sfData[1],sfData[2])\n        console.log(totalArr)\n    }*/\n\n    async function parseAPIData(data){\n        let codeAPIArray = []\n        let currentSpeedAPIArray = []\n        let averageSpeedAPIArray = []\n        let test = JSON.parse(data)\n        let json = test.result.segmentspeeds[0].segments\n        for(let lengthCounter = 0; lengthCounter < json.length; lengthCounter++){\n            currentSpeedAPIArray.push(json[lengthCounter].speed)\n            averageSpeedAPIArray.push(json[lengthCounter].average)\n            codeAPIArray.push(json[lengthCounter].code)\n        }\n        return[codeAPIArray,currentSpeedAPIArray,averageSpeedAPIArray]\n    }\n\n    function ridofUnique(apiCodeArray, currentSpeedArray, averageSpeedArray, sfCodeArray, sfNameArray, sfcoordArray){\n        let overallArray = []\n        let counter = 0\n        let high = 0\n        for(let i = 0; i < apiCodeArray.length; i++){\n            for(let j = 0; j < sfCodeArray.length; j++){\n                if((apiCodeArray[i] === sfCodeArray[j]) && sfNameArray[j] != null && sfcoordArray[j] != null)\n                {\n                    let miniArray = []\n                    miniArray.push(apiCodeArray[i])\n                    miniArray.push(sfNameArray[j])\n                    miniArray.push(sfcoordArray[j])\n                    miniArray.push(currentSpeedArray[i])\n                    if(currentSpeedArray[i] > high){\n                        high = currentSpeedArray[i]\n                    }\n                    miniArray.push(averageSpeedArray[i])\n                    if(currentSpeedArray[i]>=(averageSpeedArray[i]*1.10)|| currentSpeedArray[i]>= (65*1.10)){\n                        miniArray.push(true)\n                        counter +=1\n                    }else{\n                        miniArray.push(false)\n                    }\n                    //console.log(\"Speed: \"+ currentSpeedAPIArray[i] +\" Average: \"+ averageSpeedAPIArray[i] + \" Differential: \" + (currentSpeedArray[i]/averageSpeedArray[i])+ \" Speeding: \"+ miniArray[5])\n                    overallArray.push(miniArray)\n                }\n            }\n        }\n        return overallArray\n    }\n}\nexport default Map","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Map from \"./Map\";\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Map/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}